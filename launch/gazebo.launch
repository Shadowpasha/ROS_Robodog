<launch>
  <arg name="model" default="$(find robodog)/urdf/robodog.urdf"/>
  <arg name="rvizconfig" default="$(find robodog)/rviz/urdf.rviz" />

  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find robodog)/worlds/forest.sdf"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />

  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args="-z 0.2 -unpause -urdf -model robot -param robot_description" respawn="false" output="screen" />

  <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>

  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" /> -->

  <rosparam command="load" file="$(find robodog)/config/joints.yaml" ns="joint_manager"/>
  <rosparam command="load" file="$(find robodog)/config/positioncontrol.yaml" ns="position_controller" />
    <rosparam command="load" file="$(find robodog)/config/pid.yaml" />

  <node name="controller_spawner" pkg="controller_manager" type="spawner"
    args="joint_manager
          position_controller
          --shutdown-timeout 3"/>
  <node name="inverse_kinematics" pkg="robodog" type="inverse_kinematics.py"  launch-prefix="bash -c 'sleep 14; $0 $@'" output="screen" />

  <node pkg="rf2o_laser_odometry" type="rf2o_laser_odometry_node" name="rf2o_laser_odometry" launch-prefix="bash -c 'sleep 18; $0 $@'" >
    <param name="laser_scan_topic" value="/scan"/>        # topic where the lidar scans are being published
    <param name="odom_topic" value="/odom_laser" />              # topic where tu publish the odometry estimations
    <param name="publish_tf" value="false" />                   # wheter or not to publish the tf::transform (base->odom)
    <param name="base_frame_id" value="base_link"/>            # frame_id (tf) of the mobile robot base. A tf transform from the laser_frame to the base_frame is mandatory
    <param name="odom_frame_id" value="odom" />                # frame_id (tf) to publish the odometry estimations    
    <param name="init_pose_from_topic" value="" /> # (Odom topic) Leave empty to start at point (0,0)
    <param name="freq" value="12.0"/>                            # Execution frequency.
    <param name="verbose" value="true" />                       # verbose
  </node>

  <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" launch-prefix="bash -c 'sleep 14; $0 $@'">
      <remap from="rgb/image"        to="/kinect/color/image_raw"/>
      <remap from="depth/image"      to="/kinect/depth/image_raw"/>
      <remap from="rgb/camera_info"  to="/kinect/depth/camera_info"/>
      <remap from="rgbd_image"       to="rgbd_image"/> 
      <param name="approx_sync"       value="true"/> 
  </node>

    <!-- Odometry -->
  <node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" launch-prefix="bash -c 'sleep 14; $0 $@'">
      <param name="subscribe_rgbd" type="bool"   value="true"/>
      <param name="frame_id"       type="string" value="base_link"/>
      <remap from="rgbd_image" to="rgbd_image"/>
      <param name="publish_tf"    type="bool" value="false"/>
      <remap from="odom" to="odom_rgbd"/>
  </node>

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true" launch-prefix="bash -c 'sleep 15; $0 $@'" >
    <rosparam command="load" file="$(find robodog)/params/ekf.yaml" />
  </node>

  <!-- <node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depth_to_laser" launch-prefix="bash -c 'sleep 10; $0 $@'"  output="screen">
     <remap from="/image" to="/kinect/depth/image_raw" />
     <param name="output_frame_id" value="kinect_link"/>
     <param name="range_max" value="10.00"/>
      <param name="range_min" value="0.05"/>
  </node> -->

</launch>